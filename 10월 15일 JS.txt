# JavaScript

## LiveScript 라는 이름으로 세상에 탄생

## 프로그래밍 언어의 두가지 유형
  - 컴파일 언어 : 전통적인 대부분의 언어 (C, C++, C#, JAVA 등)
    컴파일이라는 과정을 거침
    오류가 있는 걸 미리 알수 있음
    오류 -> 수정 -> 정상적으로 동작

    사람이 작성한 언어 --> 기계어

  - 인터프리터 언어 : 코드를 바로 라인바이라인으로 읽으면서 실행
    컴파일 언어 대비 느림
    Script
    JS는 자유도가 매~~우 높음 (가장 누더기 언어..더러움)
    
# TypeScript라는 언어의 탄생 배경
  JS의 자유도를 제한하자 딱딱하게(STrict)=엄격하게 규칙을 제한하자 = TS

  JS는 브라우저에서 동작시키기 위해서 생겨난 언어

  웹브라우저에서 무언가를 실행하려고 하면?
  그 유일한 언어가 JS

  TS => JS
  
  모던언어

  사람과 사물을 중심으로 생각

  일상생활의 Object를 중심으로 생각 = 일반인들의 생각

  객체지향 언어 = JAVA 90년대 후반

  -------------------------------------------------

  Object
  백엔드 객체지향
  S.O.L.I.D

  Human 객체
  speak()
  walk()
  work()

  Class 객체
  student()
  subject()

  디자인 패턴(Design Patten)
  4명의 사람이 정했음 Gang of Four
  GoF 디자인 패턴

  *생구행
  생성자 패턴
  구조 패턴
  행위 패턴

  pc에서 서버에서 실행
  SW

  웹서비스
  Client-side 언어 - 고객측에서 동작하는 언어
  Server-side 언어 - 서버측에서 동작

 * Client-side 언어
    장점은?? 내 서버 자원을 쓰지 않는다
    단점은?? 나의 소스코드가 보호 되지 않는다

JS 구현한

웹브라우저에서 돌아감
IE, Edge, FF, Chrome

MS   Mozilla   Google

js표준화
표준화 단체
ECMAScript => ES5, ES6 이런식으로 줄여서 불림

JS는 모질라 재단을 중심으로 개발이 됨
=> 표준화 단체에서 표준화

ES6가 지금 사용하는 기능

TS 매우매우 최신 언어
==>JS(ES6)


---------------------------------------------

프로그래밍 언어

var a;
var a = 5;

var - 전연 변수, 좋지 않음 변수의 scope
let const 사용

let - 일반 변수의 정의

const = constant 상수.. 정해진 값 (한번 정하면 바뀌지 않는 값)

-----------------------

이스케이핑 캐릭터 (₩)
본연의 기능을 못하게 하고, 그냥 문자열로 취급하게 함

------------------------

@오늘 배운 것 중 중요한 것@

  arrow function

  object, 객체를 이해하기
   - ()괄호 안에 여러개의 타입을 포함하고 있는 개체이다.

------------------------

JS로 할수 있는 것은?
  웹 브라우저 내에서 할 수 있는 모~든것을 할 수 있음
  단, 이 웹 브라우저를 벗어나는 건 아무것도 할 수 없음.

이 브라우저가? 이 문서를 다루기 위해서
HTML 이라는 데이터를 HTTP라는 프로토콜로 받아왔음

문서(Document)를 받아
랜더링(Rendering) : 화면에 그림을 그려주는 것
파싱(Parsing) : 구문을 처리하는 것

그 문서를 구조화 해둔 형태를 DOM
Document Object Model

DOM을 한마디로 HTML을 구조화해 트리 구조로 가지고 있는 것

JS의 가장 주된 목적은 이 DOM을 제어하는 것



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


JavaScript

1. 탄생 배경: LiveScript
  JavaScript는 처음 "LiveScript"라는 이름으로 시작했지만, 후에 
  JavaScript로 이름이 바뀌었습니다. 웹 브라우저 내에서 동작하는 
  프로그래밍 언어로 탄생했으며, 웹 상호작용을 처리하는 핵심 언어로 자리 잡았습니다.


2. 프로그래밍 언어의 유형
  컴파일 언어
   •  대표 언어: C, C++, C#, Java 등
   •  컴파일 과정을 거쳐 코드 전체를 기계어로 변환합니다.
   •  장점: 컴파일 시 오류를 미리 확인할 수 있습니다.
   •  단점: 수정 후 다시 컴파일해야 하며, 코드가 실행되기 전까지는 결과를 알 수 없습니다.

  인터프리터 언어
   • JavaScript와 같은 스크립트 언어는 인터프리터 방식을 사용합니다.
   • 코드를 한 줄씩 읽고 즉시 실행합니다.
   • 장점: 바로 실행이 가능하여 빠른 테스트와 개발이 가능합니다.
   • 단점: 속도가 느리며, 오류는 실행 중에만 확인할 수 있습니다.

JavaScript는 자유도가 매우 높은 언어로, 개발자에게 다양한 기능을 제공하지만 
그만큼 코드가 복잡하고 실수를 일으키기 쉽습니다.


3. TypeScript의 탄생 배경
  JavaScript의 자유도를 제한하여 더 엄격한 규칙을 적용하려는 노력에서 
  TypeScript가 탄생했습니다. TypeScript는 JavaScript에 타입을 도입하여 
  코드를 더욱 견고하고 오류에 강하게 만듭니다.

  • TypeScript: 정적 타입을 지원하는 JavaScript의 상위 집합입니다.
  • TypeScript의 목적: JavaScript 코드를 보다 엄격하게 관리하고, 컴파일 타임에 오류를 사전에 방지하는 것입니다.
  
  TypeScript는 결국 JavaScript로 변환(트랜스파일)되어 브라우저에서 실행됩니다.


4. 객체지향 프로그래밍과 JavaScript
  JavaScript는 객체지향 프로그래밍을 지원하며, 객체를 중심으로 코드를 
  작성하는 방식을 취합니다.

  • 객체(Object): 상태와 동작을 가지는 개체. 예: Human 객체는 speak(), walk(), work()와 같은 메서드를 가질 수 있습니다.
  • 클래스(Class): 객체를 정의하는 틀. 예: Student, Subject 등의 클래스.

  객체지향 원칙 중 하나는 S.O.L.I.D 원칙으로, 견고하고 유지보수가 
  쉬운 소프트웨어를 설계하는 것을 목표로 합니다.

  디자인 패턴(Design Pattern)
  • GoF 디자인 패턴: 'Gang of Four'가 정의한 23가지의 객체지향 설계 패턴.
  • 생성 패턴, 구조 패턴, 행위 패턴으로 분류됩니다.


5. 클라이언트 측 언어와 서버 측 언어
  # Client-Side 언어
    • 장점: 서버 자원을 사용하지 않고, 사용자 측에서 코드를 실행합니다.
    • 단점: 소스 코드가 보호되지 않습니다.
    • 예시: HTML, CSS, JavaScript

  # Server-Side 언어
    • 서버에서 실행되며, 데이터베이스와 상호작용하거나 서버 로직을 처리합니다.
    • 예시: PHP, Node.js, Python

  JavaScript는 기본적으로 웹 브라우저에서 클라이언트 측에서 동작하는 언어입니다. 대표적인 브라우저로는 Chrome, Firefox, Edge 등이 있습니다.


6. ECMAScript와 표준화
  JavaScript는 모질라 재단을 중심으로 개발되었고, ECMAScript라는 
  표준화 단체에서 표준화 작업을 진행하고 있습니다. ECMAScript의 최신 버전인 
  ES6(ECMAScript 2015) 이후로, JavaScript는 더 발전된 기능과 성능을 
  제공하고 있습니다.


7. 변수 선언 방식
  JavaScript에서는 다양한 방식으로 변수를 선언할 수 있습니다.

  • var: 과거부터 사용되었지만, 스코프 문제로 인해 현재는 권장되지 않습니다.
  • let: 블록 범위 변수를 선언하는 현대적인 방식.
  • const: 상수를 선언하며, 값을 한 번 할당하면 변경할 수 없습니다.


8. 이스케이프 문자
  이스케이프 문자는 본래의 기능을 무력화하고 문자 그대로 출력하게 만듭니다. 
  예를 들어, \n은 줄 바꿈을 의미합니다.


9. 화살표 함수 (Arrow Function)
  화살표 함수는 간결하게 함수를 작성할 수 있는 구문입니다.
  ```
    const sum = (a, b) => a + b;
  ```


10. DOM(Document Object Model)과 JavaScript
  JavaScript의 주요 목적은 DOM을 조작하는 것입니다.

  • DOM: HTML 문서를 트리 구조로 변환하여 브라우저가 이를 해석하고 화면에 그리는 방식입니다.
  • 렌더링(Rendering): 브라우저가 화면에 콘텐츠를 그리는 과정.
  • 파싱(Parsing): HTML을 분석하여 DOM 트리를 구성하는 과정.
  
  JavaScript는 이러한 DOM을 조작하여 웹 페이지의 내용을 동적으로 변경할 수 있습니다.


11. 오늘 배운 중요한 것
  • 화살표 함수(Arrow Function)
  • 객체(Object)의 개념: 다양한 속성(property)과 메서드를 포함하는 데이터 구조.
  • DOM 제어: JavaScript로 DOM을 수정하거나 관리하여 웹 페이지를 동적으로 변경.

  